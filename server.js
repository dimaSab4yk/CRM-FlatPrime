const express = require('express');
const { Pool } = require('pg');
const cors = require('cors');
require('dotenv').config();

const app = express();
const pool = new Pool({
    connectionString: process.env.DATABASE_URL,
    ssl: { rejectUnauthorized: false } 
});

app.use(cors());
app.use(express.json()); 

app.post('/login', async (req, res) => {
    const { username, password } = req.body;

    try {
        const result = await pool.query(
            'SELECT * FROM recruiters WHERE email = $1 AND password = $2',
            [username, password]
        );

        if (result.rows.length > 0) {
            res.status(200).json({ message: '–£—Å–ø—ñ—à–Ω–∏–π –≤—Ö—ñ–¥!' });
        } else {
            res.status(401).json({ message: '–ù–µ–≤—ñ—Ä–Ω–∏–π –ª–æ–≥—ñ–Ω –∞–±–æ –ø–∞—Ä–æ–ª—å' });
        }
    } catch (err) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –ª–æ–≥—ñ–Ω—É —Ç–∞ –ø–∞—Ä–æ–ª—é:', err);
        res.status(500).json({ message: '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ' });
    }
});

app.post('/api/temp-candidates', async (req, res) => {
    const { full_name, phoneNumber, source } = req.body;

    if (!full_name || !phoneNumber || !source) {
        return res.status(400).json({ error: '–í—Å—ñ –ø–æ–ª—è —î –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–∏–º–∏.' });
    }

    try {
        const query = `
            INSERT INTO temp_candidates (full_name, phoneNumber, source)
            VALUES ($1, $2, $3)
            RETURNING *;
        `;
        const values = [full_name, phoneNumber, source];

        const result = await pool.query(query, values);
        res.status(201).json({ message: '–ö–æ–Ω—Ç–∞–∫—Ç —Ç–∏–º—á–∞—Å–æ–≤–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ', data: result.rows[0] });
    } catch (err) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –¥–æ –±–∞–∑–∏:', err);
        res.status(500).json({ error: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ.' });
    }
});

app.post('/api/candidates', async (req, res) => {
    const { full_name, phoneNumber, status, source } = req.body;
    console.log("–ü–µ—Ä–µ–¥ –≤—ñ–¥–ø—Ä–∞–≤–∫–æ—é –Ω–∞ —Å–µ—Ä–≤–µ—Ä:", full_name, phoneNumber, status, source);

    if (!full_name || !phoneNumber || !source || !status) {
        return res.status(400).json({ error: "–í—Å—ñ –ø–æ–ª—è –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –¥–ª—è –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è." });
    }

    try {
        // –î–æ–¥–∞—î–º–æ –≤ –æ—Å–Ω–æ–≤–Ω—É —Ç–∞–±–ª–∏—Ü—é
        const insertQuery = `
            INSERT INTO candidates (full_name, phonenumber, status, source)
            VALUES ($1, $2, $3, $4)
        `;
        await pool.query(insertQuery, [full_name, phoneNumber, status, source]);
        console.log("‚úÖ –î–æ–¥–∞–Ω–æ –¥–æ candidates");

        // –í–∏–¥–∞–ª—è—î–º–æ –∑ —Ç–∏–º—á–∞—Å–æ–≤–æ—ó —Ç–∞–±–ª–∏—Ü—ñ
        console.log("üßπ –í–∏–¥–∞–ª—è—î–º–æ temp_candidate –∑ –Ω–æ–º–µ—Ä–æ–º:", phoneNumber);

        const deleteQuery = `
            DELETE FROM temp_candidates WHERE phonenumber = $1
        `;
        const deleteResult = await pool.query(deleteQuery, [phoneNumber]);
        console.log("‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ –∑ temp_candidates", deleteResult.rowCount);

        res.status(200).json({ message: '–ö–∞–Ω–¥–∏–¥–∞—Ç —É—Å–ø—ñ—à–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∏–π –¥–æ –æ—Å–Ω–æ–≤–Ω–æ—ó —Ç–∞–±–ª–∏—Ü—ñ' });
    } catch (err) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞:', err);
        res.status(500).json({ error: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞' });
    }
});

app.get('/api/all-candidates', async (req, res) => {
    try {
        const result = await pool.query(`
            SELECT * FROM candidates ORDER BY id DESC;
        `);
        res.status(200).json(result.rows);
    } catch (err) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –≤—Å—ñ—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç—ñ–≤:', err);
        res.status(500).json({ error: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∫–∞–Ω–¥–∏–¥–∞—Ç—ñ–≤' });
    }
});

app.get('/api/statistics', async (req, res) => {
    try {
        const result = await pool.query(`
            SELECT 
                COUNT(*) AS total,
                COUNT(*) FILTER (WHERE status = '–ù–ë–¢') AS nbt,
                COUNT(*) FILTER (WHERE status = '–û—Ç–∫–∞–∑') AS refusal,
                COUNT(*) FILTER (WHERE status = '–°–ø—ñ–≤–±–µ—Å—ñ–¥–∞') AS interview,
                COUNT(*) FILTER (WHERE status = '–ù–µ–∞–∫—Ç—É–∞–ª—å–Ω–æ') AS not_actual,
                COUNT(*) FILTER (WHERE status = '–ü–µ—Ä–µ–∑–≤–æ–Ω') AS call_back,
                COUNT(*) FILTER (WHERE status = '–ù–µ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å') AS not_suitable,
                COUNT(*) FILTER (WHERE source = 'Work') AS work,
                COUNT(*) FILTER (WHERE source = 'Robota') AS robota,
                COUNT(*) FILTER (WHERE source = 'Jooble') AS jooble
            FROM candidates;
        `);

        res.status(200).json(result.rows[0]);
    } catch (err) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—á–∏—Å–ª–µ–Ω–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', err);
        res.status(500).json({ error: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏' });
    }
});

app.listen(5200, () => {
    console.log('–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É 5200');
});